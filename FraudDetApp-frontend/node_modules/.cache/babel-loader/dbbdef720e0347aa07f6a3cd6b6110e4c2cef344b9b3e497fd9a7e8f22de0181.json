{"ast":null,"code":"var _jsxFileName = \"/Users/lsofianos/Documents/proj-FraudDetApp/FraudDetApp-frontend/src/components/RealTimePrediction.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimePrediction = () => {\n  _s();\n  const [predictions, setPredictions] = useState(null);\n  useEffect(() => {\n    // Create WebSocket connection.\n    const socket = new WebSocket('ws://localhost:8000/ws/fraud_detection/');\n\n    // Connection opened\n    socket.onopen = () => {\n      console.log('WebSocket is open now.');\n    };\n\n    // Listen for messages\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      setPredictions(data);\n    };\n\n    // Handle errors\n    socket.onerror = error => {\n      console.error('WebSocket Error:', error);\n    };\n\n    // Clean up the WebSocket connection when the component unmounts\n    return () => {\n      console.log('Closing WebSocket connection.');\n      if (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING) {\n        socket.close();\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: predictions ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Predictions:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(predictions, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for predictions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(RealTimePrediction, \"Jb7v23xbgnBCn7h/SrG94EtpTTU=\");\n_c = RealTimePrediction;\nexport default RealTimePrediction;\nvar _c;\n$RefreshReg$(_c, \"RealTimePrediction\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","RealTimePrediction","_s","predictions","setPredictions","socket","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","onerror","error","readyState","OPEN","CONNECTING","close","children","fileName","_jsxFileName","lineNumber","columnNumber","stringify","_c","$RefreshReg$"],"sources":["/Users/lsofianos/Documents/proj-FraudDetApp/FraudDetApp-frontend/src/components/RealTimePrediction.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst RealTimePrediction = () => {\n    const [predictions, setPredictions] = useState(null);\n\n    useEffect(() => {\n        // Create WebSocket connection.\n        const socket = new WebSocket('ws://localhost:8000/ws/fraud_detection/');\n\n        // Connection opened\n        socket.onopen = () => {\n            console.log('WebSocket is open now.');\n        };\n\n        // Listen for messages\n        socket.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            setPredictions(data);\n        };\n\n        // Handle errors\n        socket.onerror = (error) => {\n            console.error('WebSocket Error:', error);\n        };\n\n        // Clean up the WebSocket connection when the component unmounts\n        return () => {\n            console.log('Closing WebSocket connection.');\n            if (socket.readyState === WebSocket.OPEN || socket.readyState === WebSocket.CONNECTING) {\n                socket.close();\n            }\n        };\n    }, []);\n\n    return (\n        <div>\n            {predictions ? (\n                <div>\n                    <h3>Predictions:</h3>\n                    <pre>{JSON.stringify(predictions, null, 2)}</pre>\n                </div>\n            ) : (\n                <p>Waiting for predictions...</p>\n            )}\n        </div>\n    );\n};\n\nexport default RealTimePrediction;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACZ;IACA,MAAMQ,MAAM,GAAG,IAAIC,SAAS,CAAC,yCAAyC,CAAC;;IAEvE;IACAD,MAAM,CAACE,MAAM,GAAG,MAAM;MAClBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACzC,CAAC;;IAED;IACAJ,MAAM,CAACK,SAAS,GAAIC,KAAK,IAAK;MAC1B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;MACnCR,cAAc,CAACQ,IAAI,CAAC;IACxB,CAAC;;IAED;IACAP,MAAM,CAACU,OAAO,GAAIC,KAAK,IAAK;MACxBR,OAAO,CAACQ,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC5C,CAAC;;IAED;IACA,OAAO,MAAM;MACTR,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;MAC5C,IAAIJ,MAAM,CAACY,UAAU,KAAKX,SAAS,CAACY,IAAI,IAAIb,MAAM,CAACY,UAAU,KAAKX,SAAS,CAACa,UAAU,EAAE;QACpFd,MAAM,CAACe,KAAK,CAAC,CAAC;MAClB;IACJ,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIpB,OAAA;IAAAqB,QAAA,EACKlB,WAAW,gBACRH,OAAA;MAAAqB,QAAA,gBACIrB,OAAA;QAAAqB,QAAA,EAAI;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACrBzB,OAAA;QAAAqB,QAAA,EAAMR,IAAI,CAACa,SAAS,CAACvB,WAAW,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,gBAENzB,OAAA;MAAAqB,QAAA,EAAG;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACnC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACvB,EAAA,CA5CID,kBAAkB;AAAA0B,EAAA,GAAlB1B,kBAAkB;AA8CxB,eAAeA,kBAAkB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}