{"ast":null,"code":"var _jsxFileName = \"/Users/lsofianos/Documents/proj-FraudDetApp/FraudDetApp-frontend/src/components/RealTimeChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Card, CardBody, CardFooter, Typography, Button } from '@material-tailwind/react';\n\n// Register the necessary components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\n// Ensure the props type is applied to the component\nconst RealTimeChart = ({\n  predictions,\n  transactions\n}) => {\n  _s();\n  const [currentPredictions, setCurrentPredictions] = useState(predictions);\n  const [currentTransactions, setCurrentTransactions] = useState(transactions);\n  const [fraudDetected, setFraudDetected] = useState({\n    logistic: false,\n    random_forest: false,\n    xgboost: false\n  });\n  useEffect(() => {\n    const socket = new WebSocket('ws://localhost:8000/ws/fraud_detection/');\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      console.log('Received data from WebSocket:', data);\n      if (data.predictions && data.transaction) {\n        setCurrentPredictions(prevPredictions => [...prevPredictions, {\n          logistic: parseFloat(data.predictions.logistic),\n          random_forest: parseFloat(data.predictions.random_forest),\n          xgboost: parseFloat(data.predictions.xgboost)\n        }]);\n        setCurrentTransactions(prevTransactions => [...prevTransactions, {\n          Time: data.transaction.Time,\n          Amount: data.transaction.Amount,\n          ...data.transaction // include other fields\n        }]);\n      } else {\n        console.error('Missing data fields', data);\n      }\n    };\n    return () => {\n      socket.close();\n    };\n  }, []);\n  const timeLabels = currentTransactions.map(t => {\n    return t !== null && t !== void 0 && t.Time ? new Date(t.Time * 1000).toLocaleTimeString() : 'N/A';\n  });\n  const data = {\n    labels: timeLabels,\n    datasets: [{\n      label: 'Logistic Regression',\n      data: currentPredictions.map(p => (p === null || p === void 0 ? void 0 : p.logistic) || 0),\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      fill: false\n    }, {\n      label: 'Random Forest',\n      data: currentPredictions.map(p => (p === null || p === void 0 ? void 0 : p.random_forest) || 0),\n      borderColor: 'rgba(153, 102, 255, 1)',\n      backgroundColor: 'rgba(153, 102, 255, 0.2)',\n      fill: false\n    }, {\n      label: 'XGBoost',\n      data: currentPredictions.map(p => (p === null || p === void 0 ? void 0 : p.xgboost) || 0),\n      borderColor: 'rgba(255, 159, 64, 1)',\n      backgroundColor: 'rgba(255, 159, 64, 0.2)',\n      fill: false\n    }, {\n      label: 'Transaction Amount',\n      data: currentTransactions.map(t => (t === null || t === void 0 ? void 0 : t.Amount) || 0),\n      borderColor: 'rgba(54, 162, 235, 1)',\n      backgroundColor: 'rgba(54, 162, 235, 0.2)',\n      fill: false,\n      yAxisID: 'y2'\n    }]\n  };\n\n  // Chart options with two y-axes\n  const options = {\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'minute'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        max: 1\n      },\n      y2: {\n        beginAtZero: true,\n        position: 'right'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    placeholder: true,\n    className: \"w-full h-full\",\n    children: [/*#__PURE__*/_jsxDEV(CardBody, {\n      placeholder: true,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        placeholder: true,\n        variant: \"h5\",\n        color: \"blue-gray\",\n        className: \"mb-2\",\n        children: \"Real-Time Fraud Detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this), fraudDetected.logistic && /*#__PURE__*/_jsxDEV(Typography, {\n        placeholder: true,\n        color: \"red\",\n        children: \"Logistic Regression: Fraud Detected!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 44\n      }, this), fraudDetected.random_forest && /*#__PURE__*/_jsxDEV(Typography, {\n        placeholder: true,\n        color: \"red\",\n        children: \"Random Forest: Fraud Detected!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 49\n      }, this), fraudDetected.xgboost && /*#__PURE__*/_jsxDEV(Typography, {\n        placeholder: true,\n        color: \"red\",\n        children: \"XGBoost: Fraud Detected!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n      placeholder: true,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        placeholder: true,\n        color: \"blue\",\n        onClick: () => window.location.reload(),\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 9\n  }, this);\n};\n_s(RealTimeChart, \"5yfnT7nxLMitHlTgclYTRIjcoZA=\");\n_c = RealTimeChart;\nexport default RealTimeChart;\nvar _c;\n$RefreshReg$(_c, \"RealTimeChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","registerables","Card","CardBody","CardFooter","Typography","Button","jsxDEV","_jsxDEV","register","RealTimeChart","predictions","transactions","_s","currentPredictions","setCurrentPredictions","currentTransactions","setCurrentTransactions","fraudDetected","setFraudDetected","logistic","random_forest","xgboost","socket","WebSocket","onmessage","event","data","JSON","parse","console","log","transaction","prevPredictions","parseFloat","prevTransactions","Time","Amount","error","close","timeLabels","map","t","Date","toLocaleTimeString","labels","datasets","label","p","borderColor","backgroundColor","fill","yAxisID","options","scales","x","type","time","unit","y","beginAtZero","max","y2","position","placeholder","className","children","variant","color","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","reload","_c","$RefreshReg$"],"sources":["/Users/lsofianos/Documents/proj-FraudDetApp/FraudDetApp-frontend/src/components/RealTimeChart.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables, ChartOptions } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Card, CardBody, CardFooter, Typography, Button } from '@material-tailwind/react';\n\n// Register the necessary components\nChart.register(...registerables);\n\ninterface Prediction {\n    logistic: number;\n    random_forest: number;\n    xgboost: number;\n}\n\ninterface Transaction {\n    Time: number;\n    Amount: number;\n    V1: number;\n    V2: number;\n    V3: number;\n    V4: number;\n    V5: number;\n    V6: number;\n    V7: number;\n    V8: number;\n    V9: number;\n    V10: number;\n    V11: number;\n    V12: number;\n    V13: number;\n    V14: number;\n    V15: number;\n    V16: number;\n    V17: number;\n    V18: number;\n    V19: number;\n    V20: number;\n    V21: number;\n    V22: number;\n    V23: number;\n    V24: number;\n    V25: number;\n    V26: number;\n    V27: number;\n    V28: number;\n    Class?: number;  // The actual fraud label, if present in your data\n}\n\ninterface RealTimeChartProps {\n    predictions: Prediction[];\n    transactions: Transaction[];\n}\n\n// Ensure the props type is applied to the component\nconst RealTimeChart: React.FC<RealTimeChartProps> = ({ predictions, transactions }) => {\n    const [currentPredictions, setCurrentPredictions] = useState<Prediction[]>(predictions);\n    const [currentTransactions, setCurrentTransactions] = useState<Transaction[]>(transactions);\n    const [fraudDetected, setFraudDetected] = useState<{ logistic: boolean, random_forest: boolean, xgboost: boolean }>({ logistic: false, random_forest: false, xgboost: false });\n\n    useEffect(() => {\n        const socket = new WebSocket('ws://localhost:8000/ws/fraud_detection/');\n\n        socket.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            console.log('Received data from WebSocket:', data);\n\n            if (data.predictions && data.transaction) {\n                setCurrentPredictions((prevPredictions) => [\n                    ...prevPredictions,\n                    {\n                        logistic: parseFloat(data.predictions.logistic),\n                        random_forest: parseFloat(data.predictions.random_forest),\n                        xgboost: parseFloat(data.predictions.xgboost),\n                    },\n                ]);\n\n                setCurrentTransactions((prevTransactions) => [\n                    ...prevTransactions,\n                    {\n                        Time: data.transaction.Time,\n                        Amount: data.transaction.Amount,\n                        ...data.transaction, // include other fields\n                    },\n                ]);\n            } else {\n                console.error('Missing data fields', data);\n            }\n        };\n\n        return () => {\n            socket.close();\n        };\n    }, []);\n\n\n    const timeLabels = currentTransactions.map((t) => {\n        return t?.Time ? new Date(t.Time * 1000).toLocaleTimeString() : 'N/A';\n    });\n\n    const data = {\n        labels: timeLabels,\n        datasets: [\n            {\n                label: 'Logistic Regression',\n                data: currentPredictions.map((p) => p?.logistic || 0),\n                borderColor: 'rgba(75, 192, 192, 1)',\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                fill: false,\n            },\n            {\n                label: 'Random Forest',\n                data: currentPredictions.map((p) => p?.random_forest || 0),\n                borderColor: 'rgba(153, 102, 255, 1)',\n                backgroundColor: 'rgba(153, 102, 255, 0.2)',\n                fill: false,\n            },\n            {\n                label: 'XGBoost',\n                data: currentPredictions.map((p) => p?.xgboost || 0),\n                borderColor: 'rgba(255, 159, 64, 1)',\n                backgroundColor: 'rgba(255, 159, 64, 0.2)',\n                fill: false,\n            },\n            {\n                label: 'Transaction Amount',\n                data: currentTransactions.map((t) => t?.Amount || 0),\n                borderColor: 'rgba(54, 162, 235, 1)',\n                backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                fill: false,\n                yAxisID: 'y2',\n            },\n        ],\n    };\n\n    // Chart options with two y-axes\n    const options: ChartOptions<'line'> = {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'minute',\n                },\n            },\n            y: {\n                beginAtZero: true,\n                max: 1,\n            },\n            y2: {\n                beginAtZero: true,\n                position: 'right',\n            },\n        },\n    };\n\n    return (\n        <Card placeholder={true} className=\"w-full h-full\">\n            <CardBody placeholder={true}>\n                <Typography placeholder={true} variant=\"h5\" color=\"blue-gray\" className=\"mb-2\">\n                    Real-Time Fraud Detection\n                </Typography>\n                <Line data={data} options={options} />\n                {fraudDetected.logistic && <Typography placeholder={true} color=\"red\">Logistic Regression: Fraud Detected!</Typography>}\n                {fraudDetected.random_forest && <Typography placeholder={true} color=\"red\">Random Forest: Fraud Detected!</Typography>}\n                {fraudDetected.xgboost && <Typography placeholder={true} color=\"red\">XGBoost: Fraud Detected!</Typography>}\n            </CardBody>\n            <CardFooter placeholder={true}>\n                <Button placeholder={true} color=\"blue\" onClick={() => window.location.reload()}>\n                    Refresh\n                </Button>\n            </CardFooter>\n        </Card>\n    );\n};\n\nexport default RealTimeChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}