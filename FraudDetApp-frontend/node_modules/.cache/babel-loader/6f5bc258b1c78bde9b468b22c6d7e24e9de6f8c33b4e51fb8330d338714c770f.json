{"ast":null,"code":"var _jsxFileName = \"/Users/lsofianos/Documents/proj-FraudDetApp/FraudDetApp-frontend/src/components/RealTimeChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimeChart = ({\n  predictions,\n  transactions\n}) => {\n  _s();\n  const [chartData, setChartData] = useState([]);\n  const [fraudAlert, setFraudAlert] = useState(null);\n  useEffect(() => {\n    // Generate labels based on the transaction time\n    const timeLabels = transactions.map(t => t.Time ? new Date(t.Time * 1000).toLocaleTimeString() : '');\n\n    // Prepare data for the chart\n    const newChartData = transactions.map((transaction, index) => {\n      var _predictions$index, _predictions$index2, _predictions$index3;\n      return {\n        time: timeLabels[index],\n        logistic: (_predictions$index = predictions[index]) === null || _predictions$index === void 0 ? void 0 : _predictions$index.logistic,\n        random_forest: (_predictions$index2 = predictions[index]) === null || _predictions$index2 === void 0 ? void 0 : _predictions$index2.random_forest,\n        xgboost: (_predictions$index3 = predictions[index]) === null || _predictions$index3 === void 0 ? void 0 : _predictions$index3.xgboost,\n        amount: transaction.Amount\n      };\n    });\n    setChartData(newChartData);\n\n    // Check for fraud and set alert\n    const latestTransaction = transactions[transactions.length - 1];\n    if (latestTransaction && latestTransaction.Class === 1) {\n      setFraudAlert(`Fraud detected at ${new Date(latestTransaction.Time * 1000).toLocaleTimeString()}`);\n    } else {\n      setFraudAlert(null);\n    }\n  }, [predictions, transactions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Real-Time Predictions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), fraudAlert && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: 'red',\n        fontWeight: 'bold'\n      },\n      children: fraudAlert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 28\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 600,\n      height: 300,\n      data: chartData,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"time\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"logistic\",\n        stroke: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"random_forest\",\n        stroke: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"xgboost\",\n        stroke: \"#ffc658\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transactions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: transactions.map((transaction, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Time: \", transaction.Time, \", Amount: \", transaction.Amount]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n_s(RealTimeChart, \"FBRVf5fjXXEQV1kVtpYVXUVyUsw=\");\n_c = RealTimeChart;\nexport default RealTimeChart;\nvar _c;\n$RefreshReg$(_c, \"RealTimeChart\");","map":{"version":3,"names":["React","useState","useEffect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","RealTimeChart","predictions","transactions","_s","chartData","setChartData","fraudAlert","setFraudAlert","timeLabels","map","t","Time","Date","toLocaleTimeString","newChartData","transaction","index","_predictions$index","_predictions$index2","_predictions$index3","time","logistic","random_forest","xgboost","amount","Amount","latestTransaction","length","Class","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","fontWeight","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","_c","$RefreshReg$"],"sources":["/Users/lsofianos/Documents/proj-FraudDetApp/FraudDetApp-frontend/src/components/RealTimeChart.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\n\ninterface Prediction {\n    logistic: number;\n    random_forest: number;\n    xgboost: number;\n}\n\ninterface Transaction {\n    Time: number;\n    Amount: number;\n    V1: number;\n    V2: number;\n    V3: number;\n    V4: number;\n    V5: number;\n    V6: number;\n    V7: number;\n    V8: number;\n    V9: number;\n    V10: number;\n    V11: number;\n    V12: number;\n    V13: number;\n    V14: number;\n    V15: number;\n    V16: number;\n    V17: number;\n    V18: number;\n    V19: number;\n    V20: number;\n    V21: number;\n    V22: number;\n    V23: number;\n    V24: number;\n    V25: number;\n    V26: number;\n    V27: number;\n    V28: number;\n    Class?: number;  // The actual fraud label\n}\n\ninterface RealTimeChartProps {\n    predictions: Prediction[];\n    transactions: Transaction[];\n}\n\nconst RealTimeChart: React.FC<RealTimeChartProps> = ({ predictions, transactions }) => {\n    const [chartData, setChartData] = useState<any[]>([]);\n    const [fraudAlert, setFraudAlert] = useState<string | null>(null);\n\n    useEffect(() => {\n        // Generate labels based on the transaction time\n        const timeLabels = transactions.map(t => t.Time ? new Date(t.Time * 1000).toLocaleTimeString() : '');\n\n        // Prepare data for the chart\n        const newChartData = transactions.map((transaction, index) => ({\n            time: timeLabels[index],\n            logistic: predictions[index]?.logistic,\n            random_forest: predictions[index]?.random_forest,\n            xgboost: predictions[index]?.xgboost,\n            amount: transaction.Amount,\n        }));\n\n        setChartData(newChartData);\n\n        // Check for fraud and set alert\n        const latestTransaction = transactions[transactions.length - 1];\n        if (latestTransaction && latestTransaction.Class === 1) {\n            setFraudAlert(`Fraud detected at ${new Date(latestTransaction.Time * 1000).toLocaleTimeString()}`);\n        } else {\n            setFraudAlert(null);\n        }\n    }, [predictions, transactions]);\n\n    return (\n        <div>\n            <h2>Real-Time Predictions</h2>\n            {fraudAlert && <div style={{ color: 'red', fontWeight: 'bold' }}>{fraudAlert}</div>}\n            <LineChart\n                width={600}\n                height={300}\n                data={chartData}\n                margin={{ top: 5, right: 30, left: 20, bottom: 5 }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"time\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"logistic\" stroke=\"#8884d8\" />\n                <Line type=\"monotone\" dataKey=\"random_forest\" stroke=\"#82ca9d\" />\n                <Line type=\"monotone\" dataKey=\"xgboost\" stroke=\"#ffc658\" />\n            </LineChart>\n            <h2>Transactions</h2>\n            <ul>\n                {transactions.map((transaction, index) => (\n                    <li key={index}>\n                        Time: {transaction.Time}, Amount: {transaction.Amount}\n                    </li>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default RealTimeChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}