{"ast":null,"code":"var _jsxFileName = \"/Users/lsofianos/Documents/proj-FraudDetApp/FraudDetApp-frontend/src/components/RealTimeChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Card, CardBody, CardFooter, Typography, Button } from '@material-tailwind/react';\n\n// Register the necessary components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst RealTimeChart = ({\n  predictions,\n  transactions\n}) => {\n  _s();\n  const [currentPredictions, setCurrentPredictions] = useState(predictions);\n  const [currentTransactions, setCurrentTransactions] = useState(transactions);\n  const [fraudDetected, setFraudDetected] = useState({\n    logistic: false,\n    random_forest: false,\n    xgboost: false\n  });\n  useEffect(() => {\n    const interval = setInterval(() => {\n      // Fetch new data and update state\n      // Example: fetchNewData().then(newData => {\n      //     setCurrentPredictions(newData.predictions);\n      //     setCurrentTransactions(newData.transactions);\n      // });\n\n      // Check for fraud detection\n      const latestTransaction = currentTransactions[currentTransactions.length - 1];\n      if (latestTransaction.Class === 1) {\n        setFraudDetected({\n          logistic: currentPredictions[currentPredictions.length - 1].logistic > 0.5,\n          random_forest: currentPredictions[currentPredictions.length - 1].random_forest > 0.5,\n          xgboost: currentPredictions[currentPredictions.length - 1].xgboost > 0.5\n        });\n      }\n    }, 5000); // Update every 5 seconds\n\n    return () => clearInterval(interval);\n  }, [currentPredictions, currentTransactions]);\n  const timeLabels = currentTransactions.map(t => new Date(t.Time * 1000).toLocaleTimeString());\n  const data = {\n    labels: timeLabels,\n    datasets: [{\n      label: 'Logistic Regression',\n      data: currentPredictions.map(p => p.logistic),\n      borderColor: 'rgba(75, 192, 192, 1)',\n      backgroundColor: 'rgba(75, 192, 192, 0.2)',\n      fill: false\n    }, {\n      label: 'Random Forest',\n      data: currentPredictions.map(p => p.random_forest),\n      borderColor: 'rgba(153, 102, 255, 1)',\n      backgroundColor: 'rgba(153, 102, 255, 0.2)',\n      fill: false\n    }, {\n      label: 'XGBoost',\n      data: currentPredictions.map(p => p.xgboost),\n      borderColor: 'rgba(255, 159, 64, 1)',\n      backgroundColor: 'rgba(255, 159, 64, 0.2)',\n      fill: false\n    }]\n  };\n  const options = {\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'minute'\n        }\n      },\n      y: {\n        beginAtZero: true,\n        max: 1\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    placeholder: true,\n    className: \"w-full h-full\",\n    children: [/*#__PURE__*/_jsxDEV(CardBody, {\n      placeholder: true,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        placeholder: true,\n        variant: \"h5\",\n        color: \"blue-gray\",\n        className: \"mb-2\",\n        children: \"Real-Time Fraud Detection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), fraudDetected.logistic && /*#__PURE__*/_jsxDEV(Typography, {\n        placeholder: true,\n        color: \"red\",\n        children: \"Logistic Regression: Fraud Detected!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 44\n      }, this), fraudDetected.random_forest && /*#__PURE__*/_jsxDEV(Typography, {\n        placeholder: true,\n        color: \"red\",\n        children: \"Random Forest: Fraud Detected!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 49\n      }, this), fraudDetected.xgboost && /*#__PURE__*/_jsxDEV(Typography, {\n        placeholder: true,\n        color: \"red\",\n        children: \"XGBoost: Fraud Detected!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n      placeholder: true,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        placeholder: true,\n        color: \"blue\",\n        onClick: () => window.location.reload(),\n        children: \"Refresh\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n};\n_s(RealTimeChart, \"5yfnT7nxLMitHlTgclYTRIjcoZA=\");\n_c = RealTimeChart;\nexport default RealTimeChart;\nvar _c;\n$RefreshReg$(_c, \"RealTimeChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","registerables","Card","CardBody","CardFooter","Typography","Button","jsxDEV","_jsxDEV","register","RealTimeChart","predictions","transactions","_s","currentPredictions","setCurrentPredictions","currentTransactions","setCurrentTransactions","fraudDetected","setFraudDetected","logistic","random_forest","xgboost","interval","setInterval","latestTransaction","length","Class","clearInterval","timeLabels","map","t","Date","Time","toLocaleTimeString","data","labels","datasets","label","p","borderColor","backgroundColor","fill","options","scales","x","type","time","unit","y","beginAtZero","max","placeholder","className","children","variant","color","fileName","_jsxFileName","lineNumber","columnNumber","onClick","window","location","reload","_c","$RefreshReg$"],"sources":["/Users/lsofianos/Documents/proj-FraudDetApp/FraudDetApp-frontend/src/components/RealTimeChart.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart, registerables, ChartOptions } from 'chart.js';\nimport 'chartjs-adapter-date-fns';\nimport { Card, CardBody, CardFooter, Typography, Button } from '@material-tailwind/react';\n\n// Register the necessary components\nChart.register(...registerables);\n\ninterface Prediction {\n    logistic: number;\n    random_forest: number;\n    xgboost: number;\n}\n\ninterface Transaction {\n    Time: number;\n    Amount: number;\n    V1: number;\n    V2: number;\n    V3: number;\n    V4: number;\n    V5: number;\n    V6: number;\n    V7: number;\n    V8: number;\n    V9: number;\n    V10: number;\n    V11: number;\n    V12: number;\n    V13: number;\n    V14: number;\n    V15: number;\n    V16: number;\n    V17: number;\n    V18: number;\n    V19: number;\n    V20: number;\n    V21: number;\n    V22: number;\n    V23: number;\n    V24: number;\n    V25: number;\n    V26: number;\n    V27: number;\n    V28: number;\n    Class?: number;  // The actual fraud label, if present in your data\n}\n\ninterface RealTimeChartProps {\n    predictions: Prediction[];\n    transactions: Transaction[];\n}\n\nconst RealTimeChart: React.FC<RealTimeChartProps> = ({ predictions, transactions }) => {\n    const [currentPredictions, setCurrentPredictions] = useState<Prediction[]>(predictions);\n    const [currentTransactions, setCurrentTransactions] = useState<Transaction[]>(transactions);\n    const [fraudDetected, setFraudDetected] = useState<{ logistic: boolean, random_forest: boolean, xgboost: boolean }>({ logistic: false, random_forest: false, xgboost: false });\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            // Fetch new data and update state\n            // Example: fetchNewData().then(newData => {\n            //     setCurrentPredictions(newData.predictions);\n            //     setCurrentTransactions(newData.transactions);\n            // });\n\n            // Check for fraud detection\n            const latestTransaction = currentTransactions[currentTransactions.length - 1];\n            if (latestTransaction.Class === 1) {\n                setFraudDetected({\n                    logistic: currentPredictions[currentPredictions.length - 1].logistic > 0.5,\n                    random_forest: currentPredictions[currentPredictions.length - 1].random_forest > 0.5,\n                    xgboost: currentPredictions[currentPredictions.length - 1].xgboost > 0.5,\n                });\n            }\n        }, 5000); // Update every 5 seconds\n\n        return () => clearInterval(interval);\n    }, [currentPredictions, currentTransactions]);\n\n    const timeLabels = currentTransactions.map(t => new Date(t.Time * 1000).toLocaleTimeString());\n\n    const data = {\n        labels: timeLabels,\n        datasets: [\n            {\n                label: 'Logistic Regression',\n                data: currentPredictions.map(p => p.logistic),\n                borderColor: 'rgba(75, 192, 192, 1)',\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                fill: false,\n            },\n            {\n                label: 'Random Forest',\n                data: currentPredictions.map(p => p.random_forest),\n                borderColor: 'rgba(153, 102, 255, 1)',\n                backgroundColor: 'rgba(153, 102, 255, 0.2)',\n                fill: false,\n            },\n            {\n                label: 'XGBoost',\n                data: currentPredictions.map(p => p.xgboost),\n                borderColor: 'rgba(255, 159, 64, 1)',\n                backgroundColor: 'rgba(255, 159, 64, 0.2)',\n                fill: false,\n            },\n        ],\n    };\n\n    const options: ChartOptions<'line'> = {\n        scales: {\n            x: {\n                type: 'time',\n                time: {\n                    unit: 'minute',\n                },\n            },\n            y: {\n                beginAtZero: true,\n                max: 1,\n            },\n        },\n    };\n\n    return (\n        <Card placeholder={true} className=\"w-full h-full\">\n            <CardBody placeholder={true}>\n                <Typography placeholder={true} variant=\"h5\" color=\"blue-gray\" className=\"mb-2\">\n                    Real-Time Fraud Detection\n                </Typography>\n                <Line data={data} options={options} />\n                {fraudDetected.logistic && <Typography placeholder={true} color=\"red\">Logistic Regression: Fraud Detected!</Typography>}\n                {fraudDetected.random_forest && <Typography placeholder={true} color=\"red\">Random Forest: Fraud Detected!</Typography>}\n                {fraudDetected.xgboost && <Typography placeholder={true} color=\"red\">XGBoost: Fraud Detected!</Typography>}\n            </CardBody>\n            <CardFooter placeholder={true}>\n                <Button placeholder={true} color=\"blue\" onClick={() => window.location.reload()}>\n                    Refresh\n                </Button>\n            </CardFooter>\n        </Card>\n    );\n};\n\nexport default RealTimeChart;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,KAAK,EAAEC,aAAa,QAAsB,UAAU;AAC7D,OAAO,0BAA0B;AACjC,SAASC,IAAI,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,MAAM,QAAQ,0BAA0B;;AAEzF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACAR,KAAK,CAACS,QAAQ,CAAC,GAAGR,aAAa,CAAC;AA+ChC,MAAMS,aAA2C,GAAGA,CAAC;EAAEC,WAAW;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGlB,QAAQ,CAAec,WAAW,CAAC;EACvF,MAAM,CAACK,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGpB,QAAQ,CAAgBe,YAAY,CAAC;EAC3F,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAkE;IAAEuB,QAAQ,EAAE,KAAK;IAAEC,aAAa,EAAE,KAAK;IAAEC,OAAO,EAAE;EAAM,CAAC,CAAC;EAE9KxB,SAAS,CAAC,MAAM;IACZ,MAAMyB,QAAQ,GAAGC,WAAW,CAAC,MAAM;MAC/B;MACA;MACA;MACA;MACA;;MAEA;MACA,MAAMC,iBAAiB,GAAGT,mBAAmB,CAACA,mBAAmB,CAACU,MAAM,GAAG,CAAC,CAAC;MAC7E,IAAID,iBAAiB,CAACE,KAAK,KAAK,CAAC,EAAE;QAC/BR,gBAAgB,CAAC;UACbC,QAAQ,EAAEN,kBAAkB,CAACA,kBAAkB,CAACY,MAAM,GAAG,CAAC,CAAC,CAACN,QAAQ,GAAG,GAAG;UAC1EC,aAAa,EAAEP,kBAAkB,CAACA,kBAAkB,CAACY,MAAM,GAAG,CAAC,CAAC,CAACL,aAAa,GAAG,GAAG;UACpFC,OAAO,EAAER,kBAAkB,CAACA,kBAAkB,CAACY,MAAM,GAAG,CAAC,CAAC,CAACJ,OAAO,GAAG;QACzE,CAAC,CAAC;MACN;IACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;IAEV,OAAO,MAAMM,aAAa,CAACL,QAAQ,CAAC;EACxC,CAAC,EAAE,CAACT,kBAAkB,EAAEE,mBAAmB,CAAC,CAAC;EAE7C,MAAMa,UAAU,GAAGb,mBAAmB,CAACc,GAAG,CAACC,CAAC,IAAI,IAAIC,IAAI,CAACD,CAAC,CAACE,IAAI,GAAG,IAAI,CAAC,CAACC,kBAAkB,CAAC,CAAC,CAAC;EAE7F,MAAMC,IAAI,GAAG;IACTC,MAAM,EAAEP,UAAU;IAClBQ,QAAQ,EAAE,CACN;MACIC,KAAK,EAAE,qBAAqB;MAC5BH,IAAI,EAAErB,kBAAkB,CAACgB,GAAG,CAACS,CAAC,IAAIA,CAAC,CAACnB,QAAQ,CAAC;MAC7CoB,WAAW,EAAE,uBAAuB;MACpCC,eAAe,EAAE,yBAAyB;MAC1CC,IAAI,EAAE;IACV,CAAC,EACD;MACIJ,KAAK,EAAE,eAAe;MACtBH,IAAI,EAAErB,kBAAkB,CAACgB,GAAG,CAACS,CAAC,IAAIA,CAAC,CAAClB,aAAa,CAAC;MAClDmB,WAAW,EAAE,wBAAwB;MACrCC,eAAe,EAAE,0BAA0B;MAC3CC,IAAI,EAAE;IACV,CAAC,EACD;MACIJ,KAAK,EAAE,SAAS;MAChBH,IAAI,EAAErB,kBAAkB,CAACgB,GAAG,CAACS,CAAC,IAAIA,CAAC,CAACjB,OAAO,CAAC;MAC5CkB,WAAW,EAAE,uBAAuB;MACpCC,eAAe,EAAE,yBAAyB;MAC1CC,IAAI,EAAE;IACV,CAAC;EAET,CAAC;EAED,MAAMC,OAA6B,GAAG;IAClCC,MAAM,EAAE;MACJC,CAAC,EAAE;QACCC,IAAI,EAAE,MAAM;QACZC,IAAI,EAAE;UACFC,IAAI,EAAE;QACV;MACJ,CAAC;MACDC,CAAC,EAAE;QACCC,WAAW,EAAE,IAAI;QACjBC,GAAG,EAAE;MACT;IACJ;EACJ,CAAC;EAED,oBACI3C,OAAA,CAACN,IAAI;IAACkD,WAAW,EAAE,IAAK;IAACC,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC9C9C,OAAA,CAACL,QAAQ;MAACiD,WAAW,EAAE,IAAK;MAAAE,QAAA,gBACxB9C,OAAA,CAACH,UAAU;QAAC+C,WAAW,EAAE,IAAK;QAACG,OAAO,EAAC,IAAI;QAACC,KAAK,EAAC,WAAW;QAACH,SAAS,EAAC,MAAM;QAAAC,QAAA,EAAC;MAE/E;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACbpD,OAAA,CAACT,IAAI;QAACoC,IAAI,EAAEA,IAAK;QAACQ,OAAO,EAAEA;MAAQ;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACrC1C,aAAa,CAACE,QAAQ,iBAAIZ,OAAA,CAACH,UAAU;QAAC+C,WAAW,EAAE,IAAK;QAACI,KAAK,EAAC,KAAK;QAAAF,QAAA,EAAC;MAAoC;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,EACtH1C,aAAa,CAACG,aAAa,iBAAIb,OAAA,CAACH,UAAU;QAAC+C,WAAW,EAAE,IAAK;QAACI,KAAK,EAAC,KAAK;QAAAF,QAAA,EAAC;MAA8B;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,EACrH1C,aAAa,CAACI,OAAO,iBAAId,OAAA,CAACH,UAAU;QAAC+C,WAAW,EAAE,IAAK;QAACI,KAAK,EAAC,KAAK;QAAAF,QAAA,EAAC;MAAwB;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpG,CAAC,eACXpD,OAAA,CAACJ,UAAU;MAACgD,WAAW,EAAE,IAAK;MAAAE,QAAA,eAC1B9C,OAAA,CAACF,MAAM;QAAC8C,WAAW,EAAE,IAAK;QAACI,KAAK,EAAC,MAAM;QAACK,OAAO,EAAEA,CAAA,KAAMC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAE;QAAAV,QAAA,EAAC;MAEjF;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEf,CAAC;AAAC/C,EAAA,CAzFIH,aAA2C;AAAAuD,EAAA,GAA3CvD,aAA2C;AA2FjD,eAAeA,aAAa;AAAC,IAAAuD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}