{"ast":null,"code":"var _jsxFileName = \"/Users/lsofianos/Documents/proj-FraudDetApp/FraudDetApp-frontend/src/components/RealTimePrediction.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimePrediction = () => {\n  _s();\n  const [predictions, setPredictions] = useState(null);\n  const [transaction, setTransaction] = useState(null);\n  useEffect(() => {\n    const socket = new WebSocket(\"ws://localhost:8000/ws/fraud_detection/\");\n    socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      setPredictions(data.predictions);\n      setTransaction(data.transaction);\n    };\n    return () => {\n      socket.close();\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: transaction && predictions ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Transaction ID: \", transaction.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Amount: $\", transaction.amount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Time: \", transaction.time]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Fraud Prediction Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        data: {\n          labels: [\"Logistic\", \"Random Forest\", \"XGBoost\"],\n          datasets: [{\n            label: \"Fraud Prediction (0 = No Fraud, 1 = Fraud)\",\n            data: [predictions.logistic, predictions.random_forest, predictions.xgboost],\n            backgroundColor: [\"rgba(75, 192, 192, 0.2)\", \"rgba(255, 159, 64, 0.2)\", \"rgba(153, 102, 255, 0.2)\"],\n            borderColor: [\"rgba(75, 192, 192, 1)\", \"rgba(255, 159, 64, 1)\", \"rgba(153, 102, 255, 1)\"],\n            borderWidth: 2\n          }]\n        },\n        options: {\n          scales: {\n            y: {\n              beginAtZero: true,\n              ticks: {\n                stepSize: 1\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Waiting for predictions...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(RealTimePrediction, \"dmWNuNVHHoARMdb9AvfTfqGCa28=\");\n_c = RealTimePrediction;\nexport default RealTimePrediction;\nvar _c;\n$RefreshReg$(_c, \"RealTimePrediction\");","map":{"version":3,"names":["React","useEffect","useState","Line","jsxDEV","_jsxDEV","RealTimePrediction","_s","predictions","setPredictions","transaction","setTransaction","socket","WebSocket","onmessage","event","data","JSON","parse","close","children","id","fileName","_jsxFileName","lineNumber","columnNumber","amount","time","labels","datasets","label","logistic","random_forest","xgboost","backgroundColor","borderColor","borderWidth","options","scales","y","beginAtZero","ticks","stepSize","_c","$RefreshReg$"],"sources":["/Users/lsofianos/Documents/proj-FraudDetApp/FraudDetApp-frontend/src/components/RealTimePrediction.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\ninterface Transaction {\n    id: string;\n    amount: number;\n    time: string;\n    // add more fields as per your dataset\n}\n\ninterface Predictions {\n    logistic: number;\n    random_forest: number;\n    xgboost: number;\n}\n\nconst RealTimePrediction: React.FC = () => {\n    const [predictions, setPredictions] = useState<Predictions | null>(null);\n    const [transaction, setTransaction] = useState<Transaction | null>(null);\n\n    useEffect(() => {\n        const socket = new WebSocket(\"ws://localhost:8000/ws/fraud_detection/\");\n\n        socket.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            setPredictions(data.predictions);\n            setTransaction(data.transaction);\n        };\n\n        return () => {\n            socket.close();\n        };\n    }, []);\n\n    return (\n        <div>\n            {transaction && predictions ? (\n                <div>\n                    <h3>Transaction ID: {transaction.id}</h3>\n                    <p>Amount: ${transaction.amount}</p>\n                    <p>Time: {transaction.time}</p>\n\n                    <h4>Fraud Prediction Results</h4>\n                    <Line\n                        data={{\n                            labels: [\"Logistic\", \"Random Forest\", \"XGBoost\"],\n                            datasets: [\n                                {\n                                    label: \"Fraud Prediction (0 = No Fraud, 1 = Fraud)\",\n                                    data: [\n                                        predictions.logistic,\n                                        predictions.random_forest,\n                                        predictions.xgboost,\n                                    ],\n                                    backgroundColor: [\n                                        \"rgba(75, 192, 192, 0.2)\",\n                                        \"rgba(255, 159, 64, 0.2)\",\n                                        \"rgba(153, 102, 255, 0.2)\",\n                                    ],\n                                    borderColor: [\n                                        \"rgba(75, 192, 192, 1)\",\n                                        \"rgba(255, 159, 64, 1)\",\n                                        \"rgba(153, 102, 255, 1)\",\n                                    ],\n                                    borderWidth: 2,\n                                },\n                            ],\n                        }}\n                        options={{\n                            scales: {\n                                y: {\n                                    beginAtZero: true,\n                                    ticks: {\n                                        stepSize: 1,\n                                    },\n                                },\n                            },\n                        }}\n                    />\n                </div>\n            ) : (\n                <p>Waiting for predictions...</p>\n            )}\n        </div>\n    );\n};\n\nexport default RealTimePrediction;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}